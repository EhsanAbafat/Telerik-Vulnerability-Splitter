#!/usr/bin/env python3

# By Ehsan Abafat
# https://abafat.ir
# Usage: You need 2 files in the root first file is old url.txt and last one is clean url.txt
# put the URLs that need be clean in fist file and run the "python source.py" command
# open the clean url.txt and boom! it is finished!
# Short Usage: Python3 source.py

# https://stackoverflow.com/questions/65998705/invalid-url-no-schema-supplied-perhaps-you-meant-http/65998737?noredirect=1

import time
import sys
import re
from tqdm.auto import tqdm
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
# from colorama import Fore, Back, Style

try:
    def finish():
        print("""

        ==============================

        Duplicated URLs Remover With it Fathers!

        Developed Version ~ 1.0.5 ==[Alpha]== By Ehsan Abafat
         _____ _                          _    _            __       _
        | ____| |__  ___  __ _ _ __      / \  | |__   __ _ / _| __ _| |_
        |  _| | '_ \/ __|/ _` | '_ \    / _ \ | '_ \ / _` | |_ / _` | __|
        | |___| | | \__ \ (_| | | | |  / ___ \| |_) | (_| |  _| (_| | |_
        |_____|_| |_|___/\__,_|_| |_| /_/   \_\_.__/ \__,_|_|  \__,_|\__|

        =============================

        clean URLs successfully!

        time that spent for this proccess:

        """)
        print(toc - tic, "S")

    if sys.argv[1] == '-h':
        print(100*"*")
        print('''

            => ~ Usage : Put dirty URLs in "old url.txt" file and call python3 source.py -?

                    -s : Fully Clean URLs
                    -d : Clean URLs with keeping "/"
                    -f : Clean Duplicated URLs Example : 1 2 3 2 => 1 2 3

           => ~ Developed Version ~ 1.0.5 ==[Alpha]== By Ehsan Abafat

        ''')
        print(100*"*")
    elif sys.argv[1] == '-s':

        tic = time.time()
        f = open("old url.txt", "r")
        flisted = f.read().lower().replace('https', 'http').replace(
            'http://', '').replace('www.', '')
        SmartRemover = re.sub("/(\w+)?", "", flisted).split('\n')
        listurl = []
        dupurl = ["\n"]
        fullclean = []
        print('\n Getting Lines... \n')
        for i in tqdm(SmartRemover):
            if i in listurl:
                dupurl.append(i.strip())
            else:
                listurl.append(i.strip())
        print('\n Cleaning... \n')
        for i in tqdm(listurl):
            if i not in dupurl:
                fullclean.append(i)
        f.close()

        flast = open("clean url.txt", "w")
        for i in fullclean:
            if(i != '\n' and i != '\s' and i != '' and len(i) > 2):
                flast.write('http://'+str(i)+'\n')
        toc = time.time()
        finish()
        flast.close()
    elif sys.argv[1] == '-d':

        tic = time.time()
        f = open("old url.txt", "r")
        flisted = f.read().lower().replace('https', 'http').replace(
            'http://', '').replace('www.', '').split()
        listurl = []
        dupurl = ["\n"]
        fullclean = []
        print('\n Getting Lines... \n')
        for i in tqdm(flisted):
            if i in listurl:
                dupurl.append(i.strip())
            else:
                listurl.append(i.strip())
        print('\n Cleaning... \n')
        for i in tqdm(listurl):
            if i not in dupurl:
                fullclean.append(i)
        f.close()

        flast = open("clean url.txt", "w")
        for i in fullclean:
            if(i != '\n' and i != '\s' and i != '' and len(i) > 2):
                flast.write('http://'+str(i)+'\n')
        toc = time.time()
        finish()
        flast.close()
    elif sys.argv[1] == '-f':

        tic = time.time()
        f = open("old url.txt", "r")
        flisted = f.read().lower().replace('https', 'http').replace(
            'http://', '').replace('www.', '').split()
        listurl = []
        dupurl = ["\n"]
        fullclean = []
        print('\n Getting Lines... \n')
        for i in tqdm(flisted):
            if i in listurl:
                dupurl.append(i.strip())
            else:
                listurl.append(i.strip())
        print('\n Cleaning... \n')
        flast = open("clean url.txt", "w")
        for i in tqdm(listurl):
            print(i)
            if(i != '\n' and i != '\s' and i != '' and len(i) > 2):
                flast.write('http://'+str(i)+'\n')
        f.close()

        toc = time.time()
        finish()
        flast.close()
    else:
        print('unknown command! use python3 source.py -h')

    if len(sys.argv) == 2:
        pass
    elif len(sys.argv) == 3 and sys.argv[2] == '--s':
        telerikuiVul = '{ "message" : "RadAsyncUpload handler is registered succesfully, however, it may not be accessed directly." }'
        telerikBugCheckADR = "/Telerik.Web.UI.WebResource.axd?type=rau"
        fopen2 = open("clean url.txt", "r")
        splurl = fopen2.read().split('\n')
        splurlcln = list(filter(str.strip, splurl))
        vullist = []
        for i in tqdm(splurlcln):
            getthis = requests.get(i, allow_redirects=True)
            sop = BeautifulSoup(getthis.text, 'html.parser')
            if "http-equiv=\"refresh\"" in str(sop) or 'http-equiv=\'refresh\'' in str(sop):
                URLREfMet = re.search(
                    "(http://|https://)(\w{3}\.)?([\w]+\.[\w]+[\.\w]+[\/\w]+)", str(sop))
                vullist.append(URLREfMet.group(0))
            else:
                vullist.append(getthis.url)
        fopen2.close()
        vulss = []
        for i in vullist:
            addr = i + telerikBugCheckADR
            print(addr)
            reqbug = requests.get(str(addr))
            BugFound = BeautifulSoup(reqbug.text, 'html.parser')
            if telerikuiVul in BugFound:
                vulss.append(i)
            else:
                pass
        print(vulss)
        fopen3 = open("vul list.txt", "w")

        for i in vulss:
            fopen3.write(str(i)+"\n")
        fopen3.close()
    elif len(sys.argv) == 3 and sys.argv[2] == '--smart':
        telerikbugtag = "Telerik.Web.UI.WebResource.axd?type=rau"
        telerikuiVul = '{ "message" : "RadAsyncUpload handler is registered succesfully, however, it may not be accessed directly." }'
        fopenAddr = open("clean url.txt", "r")
        addrlist = fopenAddr.read().split('\n')
        addrlistcln = list(filter(str.strip, addrlist))
        fopenAddr.close()
        for i in tqdm(addrlistcln):
            # Hey Mahdi!!!! I think you see that you did wrong now! Be A God ! AllRight?! ;)
            try:
                req = requests.get(i)
                if req.status_code == 200 or req.status_code == 404:
                    browser = webdriver.Firefox()
                    browser.get(i)
                    time.sleep(10)
                    RedURL = browser.current_url
                    splitADR = RedURL.split('/')
                    filteredADR = list(filter(str.strip, splitADR))
                    if len(filteredADR) > 3:
                        reqadd = str(RedURL.replace(
                            str(RedURL).split('/').pop(), ""))
                    elif len(filteredADR) == 3:
                        reqadd = filteredADR[0] + '//' + \
                            filteredADR[1] + '/' + filteredADR[2] + '/'
                    else:
                        reqadd = filteredADR[0] + '//' + \
                            filteredADR[1] + '/'
                    reqHome = RedURL.split('/')
                    requthat = requests.get(reqadd + telerikbugtag)
                    regSoup = BeautifulSoup(requthat.content, 'html.parser')
                    browser.close()
                    secondtest = requests.get(
                        reqHome[0] + "//" + reqHome[2] + '/' + telerikbugtag)
                    soupsec = BeautifulSoup(secondtest.content, 'html.parser')

                    if telerikuiVul in regSoup and telerikuiVul not in soupsec:
                        fopenvul = open("vul list.txt", "a+")
                        fopenvul.write(reqadd + telerikbugtag + "\n")
                        fopenvul.close()
                    else:
                        print('\n' + i + ' NOT VUL :( ')

                else:
                    print("Site Unavailable!")
            except Exception as e:
                print("Site Error!")

    else:
        if(sys.argv[1] != '-h'):
            print("use '<Python3 source.py -h>' command")
        else:
            print('You are see Usage of This Script!')

except Exception as e:
    print(e)
